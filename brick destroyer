#include <iostream>
#include <SDL2/SDL.h>
#include <SDL2/SDL_ttf.h>
#include <SDL2/SDL_image.h>
#include <SDL2/SDL_mixer.h>
#include <vector>
#include <cstdlib>
#include <ctime>
#include <algorithm>


using namespace std;

//global variables
int bred = 0, bgreen = 255, bblue = 0;
int ballx = 490;
int bally = 385;
int radius = 10;
int speed = 10;
int vx = speed;
int vy = speed;
int hight = 20;
int width = 100;
int px = 450;
int py = 730;
bool menu = true;
bool game = false;
bool paused = false;
int pred = 255, pgreen = 0, pblue = 0;
int yourSpeed = 15;
bool easy = false;
bool medium = false;
bool hard = false;
bool killingYou = false;

// STRUCTS---------------------------------------------------------------------------------------------------------------
struct Brick {
    int x, y, width, height;
    bool active;
    Uint8 r, g, b; // Store random color values

    Brick(int _x, int _y, int _width, int _height)
            : x(_x), y(_y), width(_width), height(_height), active(true) {
        // Assign random color
        r = std::rand() % 256;
        g = std::rand() % 256;
        b = std::rand() % 256;
    }

    void render(SDL_Renderer* renderer) {
        if (!active) return;

        SDL_SetRenderDrawColor(renderer, r, g, b, 255);
        SDL_Rect rect = {x, y, width, height};
        SDL_RenderFillRect(renderer, &rect);
    }
};
vector<Brick> bricks;

// FUNCTIONS--------------------------------------------------------------------------------------------------------------

// texts
void renderText(const char* text, int x, int y, SDL_Color color, SDL_Renderer* renderer, TTF_Font* font) {
    SDL_Surface* surface = TTF_RenderText_Solid(font, text, color);
    SDL_Texture* texture = SDL_CreateTextureFromSurface(renderer, surface);

    SDL_Rect textRect = {x, y, surface->w, surface->h};
    SDL_RenderCopy(renderer, texture, nullptr, &textRect);

    SDL_FreeSurface(surface);
    SDL_DestroyTexture(texture);
}

// icon
void setWindowIcon(SDL_Window* window) {
    std::string path = "C://Users//amirh//Downloads//DALLÂ·E 2025-02-08 20.28.21 - A retro-style icon for a Brick Breaker game. The design should feature an 8-bit pixelated paddle and ball, with colorful pixel bricks in a nostalgic a.webp";
    SDL_Surface *icon = IMG_Load(path.c_str()); // Use SDL_image to load the image
    if (!icon) {
        std::cerr << "Failed to load icon from: " << path << " - " << IMG_GetError() << std::endl;
        return;
    }
    SDL_SetWindowIcon(window, icon);
    SDL_FreeSurface(icon);
}

// draw ball
void drawBall(SDL_Renderer* renderer, int x, int y, int radius)
{
    SDL_SetRenderDrawColor(renderer, bred, bgreen, bblue, 255);
    for (int w = 0; w < radius * 2; w++)
    {
        for (int h = 0; h < radius * 2; h++)
        {
            int dx = radius - w;
            int dy = radius - h;
            if ((dx * dx + dy * dy) <= (radius * radius))
            {
                SDL_RenderDrawPoint(renderer, x + dx, y + dy);
            }
        }
    }
}

// bricks logic
void checkBallBrickCollision(int &ballX, int &ballY, int &ballVx, int &ballVy, int ballRadius, Mix_Music* brickSound) {
    for (Brick &brick : bricks) {
        if (!brick.active) continue;

        if (ballX + ballRadius > brick.x && ballX - ballRadius < brick.x + brick.width && ballY + ballRadius > brick.y && ballY - ballRadius < brick.y + brick.height) {
            Mix_PlayMusic(brickSound, 0);
            brick.active = false;

            // Calculate penetration depths
            int leftOverlap   = (brick.x + brick.width) - (ballX - ballRadius);
            int rightOverlap  = (ballX + ballRadius) - brick.x;
            int topOverlap    = (brick.y + brick.height) - (ballY - ballRadius);
            int bottomOverlap = (ballY + ballRadius) - brick.y;

            if (leftOverlap < rightOverlap && leftOverlap < topOverlap && leftOverlap < bottomOverlap) {
                ballVx = -ballVx;  // hit left
            }
            else if (rightOverlap < leftOverlap && rightOverlap < topOverlap && rightOverlap < bottomOverlap) {
                ballVx = -ballVx;  // hit right
            }
            else if (topOverlap < leftOverlap && topOverlap < rightOverlap && topOverlap < bottomOverlap) {
                ballVy = -ballVy;  // hit top
            }
            else {
                ballVy = -ballVy;  // hit bottom
            }

            break;
        }
    }
}


// ball logic
void ball(SDL_Renderer* renderer, Mix_Chunk* bounceSound, Mix_Music* brickSound) {

    SDL_SetRenderDrawColor(renderer, bred, bgreen, bblue, 255);

    drawBall(renderer, ballx, bally, radius);

    ballx += vx;
    bally += vy;

    if (ballx <= 10 || ballx + radius >= 1000) {
        vx = -vx;
        Mix_PlayChannel(-1, bounceSound, 0);
    }

    if (bally <= 10){
        vy = -vy;
        Mix_PlayChannel(-1, bounceSound, 0);
    }

    if (ballx + radius > px && ballx - radius < px + width && bally + radius > py && bally - radius < py + hight) {

        Mix_PlayChannel(-1, bounceSound, 0);
        // Calculate penetration depths
        int leftOverlap   = (px + width) - (ballx - radius);
        int rightOverlap  = (ballx + radius) - px;
        int topOverlap    = (py + hight) - (bally - radius);
        int bottomOverlap = (bally + radius) - py;

        if (leftOverlap < rightOverlap && leftOverlap < topOverlap && leftOverlap < bottomOverlap) {
            vx = -vx;  // hit left
        }
        else if (rightOverlap < leftOverlap && rightOverlap < topOverlap && rightOverlap < bottomOverlap) {
            vx = -vx;  // hit right
        }
        else if (topOverlap < leftOverlap && topOverlap < rightOverlap && topOverlap < bottomOverlap) {
            vy = -vy;  // hit top
        }
        else {
            vy = -vy;  // hit bottom
        }
    }

    if (bally >= 750){
        ballx = 490;
        bally = 355;
    }

    checkBallBrickCollision(ballx, bally, vx, vy, radius, brickSound);
}

//draw paddle
void paddle(SDL_Renderer* renderer){
    SDL_SetRenderDrawColor(renderer, pred, pgreen, pblue, 255);
    SDL_Rect rect = {px, py, width, hight};
    SDL_RenderFillRect(renderer, &rect);
}

// create bricks
void createBricks() {
    int rows = 5;
    int cols = 10;
    int brickWidth = 80;
    int brickHeight = 30;
    int startX = 50;
    int startY = 50;

    for (int row = 0; row < rows; row++) {
        for (int col = 0; col < cols; col++) {
            int x = startX + col * (brickWidth + 5);
            int y = startY + row * (brickHeight + 5);
            bricks.push_back(Brick(x, y, brickWidth, brickHeight));
        }
    }
}

// see if the level is compeleted
bool allBricksBroken() {
    return std::all_of(bricks.begin(), bricks.end(), [](const Brick& brick) {
        return !brick.active;
    });
}



//main--------------------------------------------------------------------------------------------------------------
int main(int argc, char* argv[]) {

    srand(static_cast<unsigned>(time(nullptr)));

    //initializing SDL
    if (SDL_Init(SDL_INIT_VIDEO) < 0) {
        cerr << "ERROR!\n" << SDL_GetError();
        return -1;
    }

    //initializing window
    SDL_Window *window = SDL_CreateWindow("AHA_Brick Destroyer", SDL_WINDOWPOS_CENTERED, SDL_WINDOWPOS_CENTERED, 1000, 750,SDL_WINDOW_SHOWN);
    if (!window) {
        cerr << "Window ERROR\n" << SDL_GetError();
        SDL_Quit();
        return -1;
    }
    setWindowIcon(window);

    //initializing renderer
    SDL_Renderer *renderer = SDL_CreateRenderer(window, -1, SDL_RENDERER_ACCELERATED);
    if (!renderer) {
        cerr << "renderer ERROR" << SDL_GetError();
        SDL_DestroyWindow(window);
        SDL_Quit();
        return -1;
    }

    // Initialize SDL_image
    if (!(IMG_Init(IMG_INIT_PNG) & IMG_INIT_PNG)) {
        cerr << "Failed to initialize SDL_image: " << IMG_GetError() << endl;
        SDL_Quit();
        return -1;
    }

    // Initialize SDL_ttf
    if (TTF_Init() != 0) {
        std::cerr << "SDL_ttf Initialization Error: " << TTF_GetError() << std::endl;
        SDL_Quit();
        return 1;
    }

    // Load a font
    TTF_Font *font = TTF_OpenFont("E://FONTS//arial.ttf", 24); // Adjust font size
    if (!font) {
        std::cerr << "Font Load Error: " << TTF_GetError() << std::endl;
        SDL_DestroyRenderer(renderer);
        SDL_DestroyWindow(window);
        TTF_Quit();
        SDL_Quit();
        return 1;
    }

    // Initialize SDL_mixer
    if (Mix_OpenAudio(44100, MIX_DEFAULT_FORMAT, 2, 2048) < 0) {
        cerr << "SDL_mixer Initialization Error: " << Mix_GetError() << endl;
        return -1;
    }

    // sound effects

    Mix_Chunk* bounceSound = Mix_LoadWAV("D://SOUND_EFFECTS//mixkit-ball-bouncing-in-the-ground-2077.wav");
    if (!bounceSound) {
        cerr << "Failed to load sound: " << Mix_GetError() << endl;
        return -1;
    }

    Mix_Chunk* clickSound = Mix_LoadWAV("D://SOUND_EFFECTS//mixkit-select-click-1109.wav");
    if (!clickSound) {
        cerr << "Failed to load sound: " << Mix_GetError() << endl;
        return -1;
    }

    Mix_Music* brickSound = Mix_LoadMUS("D://SOUND_EFFECTS//trung-gach-a-96162.mp3");
    if (!brickSound) {
        std::cerr << "Failed to load MP3: " << Mix_GetError() << std::endl;
        return -1;
    }




    // variables
    bool running = true;
    SDL_Event event;

    createBricks();

    // game loop
    while (running){
        while (SDL_PollEvent(&event)){
            if (event.type == SDL_QUIT){
                running = false;
            }

            if (event.type == SDL_KEYDOWN){
                if (event.key.keysym.sym == SDLK_ESCAPE && !menu){
                    paused = true;
                    menu = false;
                    game = false;
                }// paused
            }// buttons

            if (event.type == SDL_MOUSEBUTTONDOWN && event.button.button == SDL_BUTTON_LEFT && menu){
                int mouseX, mouseY;
                SDL_GetMouseState(&mouseX, &mouseY);

                if (mouseX > 350 && mouseX < 650 && mouseY > 305 && mouseY < 345){
                    easy = true;
                    medium = false;
                    hard = false;
                    killingYou = false;
                    menu = false;
                    game = true;
                    paused = false;
                    Mix_PlayChannel(-1, clickSound, 0);
                }

                if (mouseX > 350 && mouseX < 650 && mouseY > 355 && mouseY < 395){
                    easy = false;
                    medium = true;
                    hard = false;
                    killingYou = false;
                    menu = false;
                    game = true;
                    paused = false;
                    Mix_PlayChannel(-1, clickSound, 0);
                }

                if (mouseX > 350 && mouseX < 650 && mouseY > 405 && mouseY < 445){
                    easy = false;
                    medium = false;
                    hard = true;
                    killingYou = false;
                    menu = false;
                    game = true;
                    paused = false;
                    Mix_PlayChannel(-1, clickSound, 0);
                }

                if (mouseX > 350 && mouseX < 650 && mouseY > 455 && mouseY < 495){
                    easy = false;
                    medium = false;
                    hard = false;
                    killingYou = true;
                    menu = false;
                    game = true;
                    paused = false;
                    Mix_PlayChannel(-1, clickSound, 0);
                }
            }// clicks

            if (event.type == SDL_MOUSEBUTTONDOWN && event.button.button == SDL_BUTTON_LEFT && paused){

                SDL_Rect mainMenuButton = {400, 370, 200, 50};
                int mouseX, mouseY;
                SDL_GetMouseState(&mouseX, &mouseY);

                if (mouseX > 400 && mouseX < 600 && mouseY > 300 && mouseY < 350){
                    paused = false;
                    game = true;
                }

                if (mouseX > 400 && mouseX < 600 && mouseY > 370 && mouseY < 420){
                    paused = false;
                    game = false;
                    menu = true;
                }
            } // menu
        }// Poll event

        if (menu){

//            if (Mix_PlayingMusic() == 0) {
//                Mix_PlayMusic(menuMusic, -1);
//            }

            SDL_SetRenderDrawColor(renderer,0,0,0,255);
            SDL_RenderClear(renderer);

            SDL_SetRenderDrawColor(renderer, 0, 255, 0, 255);
            SDL_Rect easy = {350, 305, 300, 40};
            SDL_Rect medium = {350, 355, 300, 40};
            SDL_Rect hard = {350, 405, 300, 40};
            SDL_Rect killingYou = {350, 455, 300, 40};

            SDL_Color white = {255, 255, 255, 255};

            int mouseX, mouseY;
            SDL_GetMouseState(&mouseX, &mouseY);

            if (mouseX > easy.x && mouseX < easy.x + easy.w && mouseY > easy.y && mouseY < easy.y + easy.h) {
                easy.x -= 10;
                easy.y -= 5;
                easy.w += 20;
                easy.h += 10;
                renderText("Easy", easy.x + 130, easy.y + 10, white, renderer, font);
            }
            else{
                renderText("Easy", easy.x + 120, easy.y + 5, white, renderer, font);
            }
            SDL_RenderDrawRect(renderer, &easy);


            if (mouseX > medium.x && mouseX < medium.x + medium.w && mouseY > medium.y && mouseY < medium.y + medium.h) {
                medium.x -= 10;
                medium.y -= 5;
                medium.w += 20;
                medium.h += 10;
                renderText("Medium", medium.x + 120, medium.y + 10, white, renderer, font);
            }
            else{
                renderText("Medium", medium.x + 110, medium.y + 5, white, renderer, font);
            }
            SDL_RenderDrawRect(renderer, &medium);


            if (mouseX > hard.x && mouseX < hard.x + hard.w && mouseY > hard.y && mouseY < hard.y + hard.h) {
                hard.x -= 10;
                hard.y -= 5;
                hard.w += 20;
                hard.h += 10;
                renderText("Hard", hard.x + 130, hard.y + 10, white, renderer, font);
            }
            else{
                renderText("Hard", hard.x + 120, hard.y + 5, white, renderer, font);
            }
            SDL_RenderDrawRect(renderer, &hard);


            if (mouseX > killingYou.x && mouseX < killingYou.x + killingYou.w && mouseY > killingYou.y && mouseY < killingYou.y + killingYou.h) {
                killingYou.x -= 10;
                killingYou.y -= 5;
                killingYou.w += 20;
                killingYou.h += 10;
                renderText("Killing You", killingYou.x + 110, killingYou.y + 10, white, renderer, font);
            }
            else{
                renderText("Killing You", killingYou.x + 100, killingYou.y + 5, white, renderer, font);
            }
            SDL_RenderDrawRect(renderer, &killingYou);



            paddle(renderer);

            const Uint8* state = SDL_GetKeyboardState(NULL);

            if (state[SDL_SCANCODE_UP] && py >= yourSpeed) {
                py -= yourSpeed;
            }

            if (state[SDL_SCANCODE_DOWN] && py <= 750 - hight - yourSpeed) {
                py += yourSpeed;
            }

            if (state[SDL_SCANCODE_RIGHT] && px <= 1000 - width - yourSpeed) {
                px += yourSpeed;
            }

            if (state[SDL_SCANCODE_LEFT] && px >= yourSpeed) {
                px -= yourSpeed;
            }

            for (Brick &brick : bricks) {
                brick.active = true;
                brick.render(renderer); // only active bricks should render
            }

            SDL_RenderPresent(renderer);
        }// menu

        if (game){

            if (easy) {
                width = 150;
                speed = 7;
                vx = (vx > 0) ? speed : -speed;
                vy = (vy > 0) ? speed : -speed;
            }

            if (medium) {
                width = 100;
                speed = 7;
                vx = (vx > 0) ? speed : -speed;
                vy = (vy > 0) ? speed : -speed;
            }

            if (hard) {
                width = 100;
                speed = 10;
                vx = (vx > 0) ? speed : -speed;
                vy = (vy > 0) ? speed : -speed;

            }

            if (killingYou) {
                width = 75;
                speed = 15;
                vx = (vx > 0) ? speed : -speed;
                vy = (vy > 0) ? speed : -speed;
            }

            const Uint8* state = SDL_GetKeyboardState(NULL);

            if (state[SDL_SCANCODE_RIGHT] && px <= 1000 - width - yourSpeed) {
                px += yourSpeed;
            }

            if (state[SDL_SCANCODE_LEFT] && px >= yourSpeed) {
                px -= yourSpeed;
            }

            SDL_SetRenderDrawColor(renderer,0,0,0,255);
            SDL_RenderClear(renderer);
            ball(renderer, bounceSound, brickSound);
            paddle(renderer);

            for (Brick &brick : bricks) {
                brick.render(renderer); // only active bricks should render
            }

            if (allBricksBroken()){
                game = false;
                menu = true;
            }


            SDL_RenderPresent(renderer);

        }

        if (paused) {
            SDL_SetRenderDrawColor(renderer, 0, 0, 0, 255);
            SDL_RenderClear(renderer);

            paddle(renderer);

            drawBall(renderer, ballx, bally, radius);


            SDL_Rect resume = {400, 300, 200, 50};
            SDL_Rect mainMenu = {400, 370, 200, 50};
            SDL_Color black = {0, 0, 0, 255};

            int mouseX, mouseY;
            SDL_GetMouseState(&mouseX, &mouseY);

            SDL_Rect resumeHover = resume;
            SDL_Rect mainMenuHover = mainMenu;

            if (mouseX > resume.x && mouseX < resume.x + resume.w && mouseY > resume.y && mouseY < resume.y + resume.h) {
                resumeHover.x -= 10;
                resumeHover.y -= 5;
                resumeHover.w += 20;
                resumeHover.h += 10;
            }

            if (mouseX > mainMenu.x && mouseX < mainMenu.x + mainMenu.w && mouseY > mainMenu.y && mouseY < mainMenu.y + mainMenu.h) {
                mainMenuHover.x -= 10;
                mainMenuHover.y -= 5;
                mainMenuHover.w += 20;
                mainMenuHover.h += 10;
            }

            SDL_SetRenderDrawColor(renderer, 200, 200, 200, 255);
            SDL_RenderFillRect(renderer, &resumeHover);
            SDL_RenderFillRect(renderer, &mainMenuHover);

            renderText("Resume", resume.x + 55, resume.y + 10, black, renderer, font);
            renderText("Main Menu", mainMenu.x + 40, mainMenu.y + 10, black, renderer, font);

            SDL_RenderPresent(renderer);
        }// paused

        SDL_Delay(16);
    }// running
}// main
